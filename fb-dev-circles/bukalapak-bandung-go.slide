Bukalapak Bandung Journey with Go
Bandung
13:00 1 Oct 2017
Tags: bukalapak, bandung, Go

Zain Fathoni
Software Engineer, Bukalapak
zain.fathoni@bukalapak.com
https://t.me/zainfathoni
@zainfathoni

https://www.idgolang.com
üë®üèª‚ÄçüíªüáÆüá© My Go tutorial screencasts in Bahasa Indonesia.

https://ojekbelanja.id
üõµüõí My sandbox project which hopefully might be useful someday.

https://www.idrails.com
üë®üèª‚ÄçüíªüáÆüá© My fellow Bukalapak Software Engineer's Ruby on Rails tutorial screencasts in Bahasa Indonesia.

* License and Materials

This presentation is a collaboration of [[https://www.bukalapak.com][Bukalapak]] Bandung team members.

This presentation is licensed under the [[https://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0 International]] licence.

The materials for this presentation are available on GitHub:

.link https://github.com/zainfathoni/go-talks

This particular presentation slide is accessible online at:

.link http://bit.ly/bukalapak-go

* Introduction

*What?*Bukalapak*Bandung?*

.image images/bukalapak-logo.png

Yes, Bukalapak had established a _Representative_Office_ in Bandung for a while.
One of the teams in the office is developing [[https://www.bukalapak.com/bukapengadaan][BukaPengadaan]], which is using Go.

*What?*Go*‚Äîa language developed by *Google*'s team‚Äîin a *Facebook* Developer Circles talk?

Well, even Facebook has several open source projects in Go üòÅ

.link https://github.com/facebookgo

* Outline

- Microservices at a glance
- Considering Go
- What we love
- What we expected
- What we found out
- What we learnt

* Microservices at a glance

* Microservices at a glance

.image images/sketch.png 500 _

.caption _Monoliths_and_Microservices_ in [[https://martinfowler.com/articles/microservices.html][Microservices]] article by [[https://twitter.com/boicy][James Lewis]] & [[https://martinfowler.com/][Martin Fowler]]

: Instance Scalability

* Microservices at a glance

: Technological Independence

.image images/decentralised-data.png 500 _

.caption _Monoliths_and_Microservices_Databases_ in [[https://martinfowler.com/articles/microservices.html][Microservices]] article by [[https://twitter.com/boicy][James Lewis]] & [[https://martinfowler.com/][Martin Fowler]]

* Microservices at a glance

.image images/Microservice_Architecture.png 500 _

: In Bukalapak, the architecture is a little bit more complex, but this image represents the main idea of Bukalapak's Microservices Architecture

.caption _Fictitious_e-commerce_application_ in [[http://microservices.io/patterns/microservices.html][Pattern: Microservice Architecture]]

* Microservices at a glance

It enables different tech stacks to be employed in a single application.

Just as [[https://www.bukalapak.com][Bukalapak]] stated in its [[https://stackoverflow.com/jobs/companies/bukalapak][Stack Overflow Jobs]] company page.

_Bukalapak_values_ *freedom*and*experimentation* _,_and_we_believe_there_are_no_silver_bullet_or_one-size-fits-all_in_terms_of_tech_stack._

_We_are_proudly_ *polyglot* _and_never_shy_away_from_trying_out_new_tech_or_stack._We_started_our_tech_with_ *Ruby* _,_and_we_have_now_spread_into_ *Golang,*Python,*Elixir*and*Node.js* _to_power_hundreds_of_our_microservices._

_The_key_culture_of_our_engineering_is_that_teams_are_ *free* _to_make_their_own_case_regarding_what_tech_they_choose_to_use_for_any_stories_they_are_working_on_with._

e.g. Notification Squad is given the freedom to decide their own teck stacks for their [[https://engineering.bukalapak.io/onsite-notification-service/][Onsite Notification Service]].

* Considering Go

* Considering Go

Just like the other teams, my team which is responsible for [[https://www.bukalapak.com/bukapengadaan][BukaPengadaan]] Service is also given the freedom to decide our own tech stacks.

We did it by using an *extremely*dumb* laundry-list comparison as an initial considerations. üôÉ

.image images/Initial_Considerations.png _ 970

Then we dug down deeper to the nominees, *Rust* and *Go*.

* Considering Go

.image images/Final_Comparisons.png 570 _

* What we love

* What we love

- Method Receiver
- Interface
- Mocking using Interface
- Explicit variable declaration & usage checking
- Multiple assignments & multiple results
- Error handling
- Defer statement
- First class functions
- Concurrency
- gotools: gofmt, golint, goreturn, etc.

* Method Receiver

Let's say we have a *Dog* type which can *Speak()*.

.code codes/dog/main.go /START Dog OMIT/,/END Dog OMIT/

.code codes/dog/main.go /START Speak OMIT/,/END Speak OMIT/ HLSpeak

By having *(d*Dog)* as a [[https://tour.golang.org/methods/3][receiver]], we can call *Speak()* method this way.

.play codes/dog/main.go /START Bark OMIT/,/END Bark OMIT/

*Receiver* enables us to add our logic to any type we want, without modifying the type declaration at all.

* Interface

Then let's define an *Animal* interface with the *Speak()* method.

.code codes/animal/main.go /START Animal OMIT/,/END Animal OMIT/ HLSpeak

We want that animal to *SaySomething()*.

.code codes/animal/main.go /START SaySomething OMIT/,/END SaySomething OMIT/ HLSaySomething

Then automatically our previous *Dog* type can satisfy this *Animal* interface without needing to change anything in *Dog* declaration & implementation.

.play codes/animal/main.go /START main OMIT/,/END main OMIT/ HLSaySomething

.caption No *implement* keyword required

* Mocking using Interface

We want to test *SaySomething()* by giving it another type to mock *Dog* ability to *Speak()*, let's say it's a *Cat*.

.code codes/cat/main.go /START Cat OMIT/,/END Cat OMIT/ HLSpeak

We can make sure that *SaySomething()* calls *Speak()* method correctly.

.play codes/cat/main.go /START TestSaySomething OMIT/,/END TestSaySomething OMIT/ HLSaySomething

It's all done without modifying the *Dog* type at all, again.

* Explicit variable declaration & usage checking

Variables should be declared explicitly.

  var b bool       // Declaration
  var i int = 10   // Declaration & Assignment
  s := "Bukalapak" // Short Declaration & Assignment

Undefined variable causes compilation error.

.play codes/declaration/main.go /START main OMIT/,/END main OMIT/

So does unused variable.

.play codes/usage/main.go /START main OMIT/,/END main OMIT/

Since Go is a [[https://blog.golang.org/go15gc][*Garbage-Collected*]] language, these are quite important to help us avoid memory leaks.

* Multiple assignments & multiple results

Multiple variables can be assigned in a single line.

  b, i, s := true, 10, "Bukalapak" // This line is equivalent with the previous 3 lines of assignments

Therefore, it's possible for a function to return multiple results.

  func swap(x, y string) (string, string) {
    return y, x
  } 

It is commonly used to return error value, e.g. [[https://golang.org/pkg/strconv/#ParseBool][strconv.ParseBool()]].

  func ParseBool(str string) (bool, error)

.play codes/parse_bool/main.go /^func main/,/^}/

* Error handling

Many programming languages handle errors by treating them as *exceptions*.
If errors are merely return values why should we treat them differently? We shouldn‚Äôt.

So, instead of using an implicit try-catch block to handle exceptions, we just use the multiple results of functions in Go.

.play codes/print_bool/main.go /START PrintBool OMIT/,/END PrintBool OMIT/

* Error handling

It forces us to handle the error value. It's almost impossible to accidentally ignore the error value.
If we forget to assign the returned error to a variable:

.play codes/forget_error/main.go /^\tb/,/\)$/

If we forget to use the error value assigned:

.play codes/unused_error/main.go /^\tb/,/\)$/

However, we could still ignore the error *intentionally* by assigning the error into [[https://golang.org/doc/effective_go.html#blank][the blank identifier]]

.play codes/blank_error/main.go /^\tb/,/\)$/

* Defer statement

A [[https://tour.golang.org/flowcontrol/12][defer]] statement defers the execution of a function until the surrounding function returns.

The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.

.play codes/defer/main.go /^func main/,/^}/

It is commonly used to defer _'clean_up'_ functions execution.
It is put right after the _'dirty'_ functions to group the same context together.

* First class functions

It's a concept from *Functional*Programming*, where a function can receive other functions as arguments and returns other functions as well.

.play codes/functions/main.go /START Functions OMIT/,/END Functions OMIT/

* Concurrency

_"Don‚Äôt_communicate_by_sharing_memory,_share_memory_by_communicating."_

An example of _"communicate_by_sharing_memory"_ in Ruby:

  lock = Mutex.new

  a = Thread.new {
    lock.synchronize {
      # access shared resource
    }
  }

  b = Thread.new {
    lock.synchronize {
      # access shared resource
    }
  }

Let's see how we _"share_memory_by_communicating"_ in Go.

* Concurrency

[[https://tour.golang.org/concurrency/1][Goroutines]] communicate using [[https://tour.golang.org/concurrency/2][channels]].

.play codes/concurrency/main.go /START Concurrency OMIT/,/END Concurrency OMIT/

* Expectations vs Reality

* What we expected

- Since Go provide an Interface feature, we could code in common Object Oriented Programming way
- Structuring Go codes is as simple as common MVC web applications
- Database migration tools is reliable enough
- ORM support is reliable enough
- Go Interface feature is quite powerful to mock actual implementations for testing purpose

* Expectations vs Reality #1

- Expectation

Since Go provide an Interface feature, we could code in common Object Oriented Programming way

- Reality

.link https://golang.org/doc/faq#Is_Go_an_object-oriented_language

Go favors Composition over Inheritance, so we should code in Go way, not OOP way

* What we found out

- Go favors Composition over Inheritance, so we should code in Go way, not OOP way
- Go folder structures are *library-driven* or *package-driven*, instead of *role-driven* as in common MVC web applications
- Database migration tools is cumbersome
- ORM library acts weirdly
- Go Interface is powerful indeed, but it is still not sufficient enough to mock complex libraries such as ORM libraries
: Even rabbitmq needs another cumbersome wrapper library just to enable testability

* What we learnt

* References

.link http://mjk.space/5-things-about-programming-learned-with-go/
