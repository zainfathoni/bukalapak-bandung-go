Bukalapak Bandung Journey with Go
Bandung
13:00 1 Oct 2017
Tags: bukalapak, bandung, Go

Zain Fathoni
Software Engineer, Bukalapak
zain.fathoni@bukalapak.com
https://t.me/zainfathoni
@zainfathoni

https://www.idgolang.com
üë®üèª‚ÄçüíªüáÆüá© My Go tutorial screencasts in Bahasa Indonesia.

https://ojekbelanja.id
üõµüõí My sandbox project which hopefully might be useful someday.

https://www.idrails.com
üë®üèª‚ÄçüíªüáÆüá© My fellow Bukalapak Software Engineer's Ruby on Rails tutorial screencasts in Bahasa Indonesia.

* License and Materials

This presentation is a collaboration of [[https://www.bukalapak.com][Bukalapak]] Bandung team members.

This presentation is licensed under the [[https://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0 International]] licence.

The materials for this presentation are available on GitHub:

.link https://github.com/zainfathoni/go-talks

This particular presentation slide is accessible online at:

.link http://bit.ly/bukalapak-go

* Introduction

*What?*Bukalapak*Bandung?*

.image images/bukalapak-logo.png

Yes, Bukalapak had established a _Representative_Office_ in Bandung for a while.
One of the teams in the office is developing [[https://www.bukalapak.com/bukapengadaan][BukaPengadaan]], which is using Go.

*What?*Go*‚Äîa language developed by *Google*'s team‚Äîin a *Facebook* Developer Circles talk?

Well, even Facebook has several open source projects in Go üòÅ

.link https://github.com/facebookgo

* Outline

- Microservices at a glance
- Considering Go
- What we expected
- What we found out
- What we learnt
- What we love

* Microservices at a glance

* Microservices at a glance

.image images/sketch.png 500 _

.caption _Monoliths_and_Microservices_ in [[https://martinfowler.com/articles/microservices.html][Microservices]] article by [[https://twitter.com/boicy][James Lewis]] & [[https://martinfowler.com/][Martin Fowler]]

: Instance Scalability

* Microservices at a glance

: Technological Independence

.image images/decentralised-data.png 500 _

.caption _Monoliths_and_Microservices_Databases_ in [[https://martinfowler.com/articles/microservices.html][Microservices]] article by [[https://twitter.com/boicy][James Lewis]] & [[https://martinfowler.com/][Martin Fowler]]

* Microservices at a glance

.image images/Microservice_Architecture.png 500 _

: In Bukalapak, the architecture is a little bit more complex, but this image represents the main idea of Bukalapak's Microservices Architecture

.caption _Fictitious_e-commerce_application_ in [[http://microservices.io/patterns/microservices.html][Pattern: Microservice Architecture]]

* Microservices at a glance

It enables different tech stacks to be employed in a single application.

Just as [[https://www.bukalapak.com][Bukalapak]] stated in its [[https://stackoverflow.com/jobs/companies/bukalapak][Stack Overflow Jobs]] company page.

_Bukalapak_values_ *freedom*and*experimentation* _,_and_we_believe_there_are_no_silver_bullet_or_one-size-fits-all_in_terms_of_tech_stack._

_We_are_proudly_ *polyglot* _and_never_shy_away_from_trying_out_new_tech_or_stack._We_started_our_tech_with_ *Ruby* _,_and_we_have_now_spread_into_ *Golang,*Python,*Elixir*and*Node.js* _to_power_hundreds_of_our_microservices._

_The_key_culture_of_our_engineering_is_that_teams_are_ *free* _to_make_their_own_case_regarding_what_tech_they_choose_to_use_for_any_stories_they_are_working_on_with._

e.g. Notification Squad is given the freedom to decide their own teck stacks for their [[https://engineering.bukalapak.io/onsite-notification-service/][Onsite Notification Service]].

* Considering Go

* Considering Go

Just like the other teams, my team which is responsible for [[https://www.bukalapak.com/bukapengadaan][BukaPengadaan]] Service is also given the freedom to decide our own tech stacks.

We did it by using an *extremely*dumb* laundry-list comparison as an initial considerations. üôÉ

.image images/Initial_Considerations.png _ 970

Then we dug down deeper to the nominees, *Rust* and *Go*.

* Considering Go

.image images/Final_Comparisons.png 570 _

* Expectations vs Reality

* What we expected

- Since Go provide an Interface feature, we could code in common Object Oriented Programming way
- Structuring Go codes is as simple as common MVC web applications
- Database migration tools is reliable enough
- ORM support is reliable enough
- Go Interface feature is quite powerful to mock actual implementations for testing purpose
- Since we're writing from scratch, there should be not much refactoring necessary

* Expectations vs Reality #1

- Expectation

Since Go provide an Interface feature, we could code in common Object Oriented Programming way

- Reality

.link https://golang.org/doc/faq#Is_Go_an_object-oriented_language

Go favors Composition over Inheritance, so we should code in Go way, not OOP way

* What we found out

- Go favors Composition over Inheritance, so we should code in Go way, not OOP way
- Go folder structures are *library-driven* or *package-driven*, instead of *role-driven* as in common MVC web applications
- Database migration tools is cumbersome
- ORM library acts weirdly
- Go Interface is powerful indeed, but it is still not sufficient enough to mock complex libraries such as ORM libraries
: Even rabbitmq needs another cumbersome wrapper library just to enable testability
- Endless refactoring, roughly almost 50% of our codes are refactored, even before the product went live

* What we learnt

* What we learnt

.link http://mjk.space/5-things-about-programming-learned-with-go/

* What we love

* What we love

- gofmt
