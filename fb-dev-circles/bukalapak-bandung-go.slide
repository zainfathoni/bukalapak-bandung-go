Bukalapak Bandung Journey with Go
Bandung
13:00 1 Oct 2017
Tags: bukalapak, bandung, Go

Zain Fathoni
Software Engineer, Bukalapak
zain.fathoni@bukalapak.com
https://t.me/zainfathoni
@zainfathoni

https://www.idgolang.com
üë®üèª‚ÄçüíªüáÆüá© My Go tutorial screencasts in Bahasa Indonesia.

https://ojekbelanja.id
üõµüõí My sandbox project which hopefully might be useful someday.

https://www.idrails.com
üë®üèª‚ÄçüíªüáÆüá© My fellow Bukalapak Software Engineer's Ruby on Rails tutorial screencasts in Bahasa Indonesia.

* License and Materials

This presentation is a collaboration of [[https://www.bukalapak.com][Bukalapak]] Bandung team members.

This presentation is licensed under the [[https://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0 International]] licence.

The materials for this presentation are available on GitHub:

.link https://github.com/zainfathoni/go-talks

This particular presentation slide is accessible online at:

.link http://bit.ly/bukalapak-go

* Introduction

*What?*Bukalapak*Bandung?*

.image images/bukalapak-logo.png

Yes, Bukalapak had established a _Representative_Office_ in Bandung for a while.
One of the teams in the office is developing [[https://www.bukalapak.com/bukapengadaan][BukaPengadaan]], which is using Go.

*What?*Go*‚Äîa language developed by *Google*'s team‚Äîin a *Facebook* Developer Circles talk?

.image images/gopher.png 80 _

Well, even Facebook has several open source projects in Go üòÅ

.link https://github.com/facebookgo

* Outline

- Microservices at a glance
- Considering Go
- What we love
- What we expected
- What we found out
- What we learnt

* Microservices at a glance

* Microservices at a glance

.image images/sketch.png 500 _

.caption _Monoliths_and_Microservices_ in [[https://martinfowler.com/articles/microservices.html][Microservices]] article by [[https://twitter.com/boicy][James Lewis]] & [[https://martinfowler.com/][Martin Fowler]]

: Instance Scalability

* Microservices at a glance

: Technological Independence

.image images/decentralised-data.png 500 _

.caption _Monoliths_and_Microservices_Databases_ in [[https://martinfowler.com/articles/microservices.html][Microservices]] article by [[https://twitter.com/boicy][James Lewis]] & [[https://martinfowler.com/][Martin Fowler]]

* Microservices at a glance

.image images/Microservice_Architecture.png 500 _

: In Bukalapak, the architecture is a little bit more complex, but this image represents the main idea of Bukalapak's Microservices Architecture

.caption _Fictitious_e-commerce_application_ in [[http://microservices.io/patterns/microservices.html][Pattern: Microservice Architecture]]

* Microservices at a glance

It enables different tech stacks to be employed in a single application.

Just as [[https://www.bukalapak.com][Bukalapak]] stated in its [[https://stackoverflow.com/jobs/companies/bukalapak][Stack Overflow Jobs]] company page.

_Bukalapak_values_ *freedom*and*experimentation* _,_and_we_believe_there_are_no_silver_bullet_or_one-size-fits-all_in_terms_of_tech_stack._

_We_are_proudly_ *polyglot* _and_never_shy_away_from_trying_out_new_tech_or_stack._We_started_our_tech_with_ *Ruby* _,_and_we_have_now_spread_into_ *Golang,*Python,*Elixir*and*Node.js* _to_power_hundreds_of_our_microservices._

_The_key_culture_of_our_engineering_is_that_teams_are_ *free* _to_make_their_own_case_regarding_what_tech_they_choose_to_use_for_any_stories_they_are_working_on_with._

e.g. Notification Squad is given the freedom to decide their own teck stacks for their [[https://engineering.bukalapak.io/onsite-notification-service/][Onsite Notification Service]].

* Considering Go

* Considering Go

Just like the other teams, my team which is responsible for [[https://www.bukalapak.com/bukapengadaan][BukaPengadaan]] Service is also given the freedom to decide our own tech stacks.

We did it by using an *extremely*dumb* laundry-list comparison as an initial considerations. üôÉ

.image images/Initial_Considerations.png _ 970

Then we dug down deeper to the nominees, *Rust* and *Go*.

* Considering Go

.image images/Final_Comparisons.png 570 _

* What we love

* What we love

- Method Receiver
- Interface
- Mocking using Interface
- Explicit variable declaration & usage checking
- Multiple assignments & multiple results
- Error handling
- Defer statement
- First class functions
- Concurrency
- Code Formatting

* Method Receiver

Let's say we have a *Dog* type which can *Speak()*.

.code codes/dog/main.go /START Dog OMIT/,/END Dog OMIT/

.code codes/dog/main.go /START Speak OMIT/,/END Speak OMIT/ HLSpeak

By having *(d*Dog)* as a [[https://tour.golang.org/methods/3][receiver]], we can call *Speak()* method this way.

.play codes/dog/main.go /START Bark OMIT/,/END Bark OMIT/

*Receiver* enables us to add our logic to any type we want, without modifying the type declaration at all.

* Interface

Then let's define an *Animal* interface with the *Speak()* method.

.code codes/animal/main.go /START Animal OMIT/,/END Animal OMIT/ HLSpeak

We want that animal to *SaySomething()*.

.code codes/animal/main.go /START SaySomething OMIT/,/END SaySomething OMIT/ HLSaySomething

Then automatically our previous *Dog* type can satisfy this *Animal* interface without needing to change anything in *Dog* declaration & implementation.

.play codes/animal/main.go /START main OMIT/,/END main OMIT/ HLSaySomething

.caption No *implement* keyword required

* Mocking using Interface

We want to test *SaySomething()* by giving it another type to mock *Dog* ability to *Speak()*, let's say it's a *Cat*.

.code codes/cat/main.go /START Cat OMIT/,/END Cat OMIT/ HLSpeak

We can make sure that *SaySomething()* calls *Speak()* method correctly.

.play codes/cat/main.go /START TestSaySomething OMIT/,/END TestSaySomething OMIT/ HLSaySomething

It's all done without modifying the *Dog* type at all, again.

* Explicit variable declaration & usage checking

Variables should be declared explicitly.

  var b bool       // Declaration
  var i int = 10   // Declaration & Assignment
  s := "Bukalapak" // Short Declaration & Assignment

Undefined variable causes compilation error.

.play codes/declaration/main.go /START main OMIT/,/END main OMIT/

So does unused variable.

.play codes/usage/main.go /START main OMIT/,/END main OMIT/

Since Go is a [[https://blog.golang.org/go15gc][*Garbage-Collected*]] language, these are quite important to help us avoid memory leaks.

* Multiple assignments & multiple results

Multiple variables can be assigned in a single line.

  b, i, s := true, 10, "Bukalapak" // This line is equivalent with the previous 3 lines of assignments

Therefore, it's possible for a function to return multiple results.

  func swap(x, y string) (string, string) {
    return y, x
  } 

It is commonly used to return error value, e.g. [[https://golang.org/pkg/strconv/#ParseBool][strconv.ParseBool()]].

  func ParseBool(str string) (bool, error)

.play codes/parse_bool/main.go /^func main/,/^}/

* Error handling

Many programming languages handle errors by treating them as *exceptions*.
If errors are merely return values why should we treat them differently? We shouldn‚Äôt.

So, instead of using an implicit try-catch block to handle exceptions, we just use the multiple results of functions in Go.

.play codes/print_bool/main.go /START PrintBool OMIT/,/END PrintBool OMIT/

* Error handling

It forces us to handle the error value. It's almost impossible to accidentally ignore the error value.
If we forget to assign the returned error to a variable:

.play codes/forget_error/main.go /^\tb/,/\)$/

If we forget to use the error value assigned:

.play codes/unused_error/main.go /^\tb/,/\)$/

However, we could still ignore the error *intentionally* by assigning the error into [[https://golang.org/doc/effective_go.html#blank][the blank identifier]]

.play codes/blank_error/main.go /^\tb/,/\)$/

* Defer statement

A [[https://tour.golang.org/flowcontrol/12][defer]] statement defers the execution of a function until the surrounding function returns.

The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.

.play codes/defer/main.go /^func main/,/^}/

It is commonly used to defer _'clean_up'_ functions execution.
It is put right after the _'dirty'_ functions to group the same context together.

* First class functions

It's a concept from *Functional*Programming*, where a function can receive other functions as arguments and returns other functions as well.

.play codes/functions/main.go /START Functions OMIT/,/END Functions OMIT/

* Concurrency

_"Don‚Äôt_communicate_by_sharing_memory,_share_memory_by_communicating."_

An example of _"communicate_by_sharing_memory"_ in Ruby:

  lock = Mutex.new

  a = Thread.new {
    lock.synchronize {
      # access shared resource
    }
  }

  b = Thread.new {
    lock.synchronize {
      # access shared resource
    }
  }

Let's see how we _"share_memory_by_communicating"_ in Go.

* Concurrency

[[https://tour.golang.org/concurrency/1][Goroutines]] communicate using [[https://tour.golang.org/concurrency/2][channels]].

.play codes/concurrency/main.go /START Concurrency OMIT/,/END Concurrency OMIT/

* Code Formatting

.link https://blog.golang.org/go-fmt-your-code go fmt your code
  
  gofmt main.go

[[https://golang.org/cmd/gofmt/][Gofmt]] is a tool that automatically formats Go source code. Gofmt'd code is:

- easier to *write*: never worry about minor formatting concerns while hacking away,
- easier to *read*: when all code looks the same you need not mentally convert others' formatting style into something you can understand.
- easier to *maintain*: mechanical changes to the source don't cause unrelated changes to the file's formatting; diffs show only the real changes.
- *uncontroversial*: never have a debate about spacing or brace position ever again!

* Expectations vs Reality

* What we expected (Expectations)

- Since Go provide an Interface feature, we could code in common Object Oriented Programming way
- Database migration tools is reliable enough
- ORM support is reliable enough
- Go Interface feature is quite powerful to mock actual implementations for testing purpose

* What we found out (Reality)

* Expectations vs Reality #1

- Expectation

Since Go provide an Interface feature, we could code in common Object Oriented Programming way

- Reality

.link https://golang.org/doc/faq#Is_Go_an_object-oriented_language Is Go an object-oriented language? Yes and no.

.link https://medium.com/@benbjohnson/structuring-applications-in-go-3b04be4ff091 Structuring Applications in Go

If you‚Äôre writing Go projects the same way you write Ruby, Java, or Node.js projects then you‚Äôre probably going to be fighting with the language.

.link http://mjk.space/5-things-about-programming-learned-with-go/ It's better to compose than inherit

Go favors Composition over Inheritance, so we should code in Go way, not OOP way

* Inheritance Example

.image images/inheritance_level2.png
.caption _Vehicle_with_inheritance_ in [[http://mjk.space/how-to-avoid-inheritance-in-ruby/][How to avoid inheritance in Ruby?]]

.image images/inheritance_level3.png
.caption _Vehicle_with_even_more_inheritance_ in [[http://mjk.space/how-to-avoid-inheritance-in-ruby/][How to avoid inheritance in Ruby?]]

* Composition Example

.image images/composition.png
.caption _Composition_in_action_  in [[http://mjk.space/how-to-avoid-inheritance-in-ruby/][How to avoid inheritance in Ruby?]]

How do we do it in Go?

* Composition in Go

.code codes/vehicle/electric_car/main.go /START Engine Body OMIT/,/END Engine Body OMIT/ HLEngineBody
.code codes/vehicle/electric_car/main.go /START Vehicle OMIT/,/END Vehicle OMIT/ HLEngineBody

.play codes/vehicle/petrol_truck/main.go /START petrolTruck OMIT/,/END petrolTruck OMIT/
.play codes/vehicle/electric_car/main.go /START electricCar OMIT/,/END electricCar OMIT/

* Expectations vs Reality #2

- Expectation

Database migration tools is reliable enough.

- Reality

We were using [[https://godoc.org/github.com/pressly/goose][goose]] at first, then we moved to [[https://godoc.org/github.com/eure/kamimai][kamimai]] recently.

Both only support database schema migration, they don't support records migration (yet).
Even we use [[https://github.com/Fs02/kamimai][my colleague's fork version of kamimai]] to make it run as we expect.

However, it's an opportunity to fill this gap with our open source contribution.
[[https://hacktoberfest.digitalocean.com][Anybody interested?]] üòè

* Expectations vs Reality #3

ORM (Object Relational Mapping) in other languages, e.g. Hibernate in Java, Entity Framework in .NET, ActiveRecord in Rails, etc.

- Expectation

ORM support is reliable enough.

- Reality

We are using [[http://jinzhu.me/gorm/][gorm]].

It has some quirks, and sometimes they're quite dangerous, which made us avoid using its certain features, such as [[http://jinzhu.me/gorm/crud.html#delete][Soft Delete]].
We found out those quirks in our QA phase.

We are still looking for other alternative ORM libraries.

* Expectations vs Reality #4

- Expectation

Go Interface feature is quite powerful to mock actual implementations for testing purpose.

- Reality

Go Interface is powerful indeed, but if complex libraries are not designed with Interface in mind, the mocking efforts will be cumbersome enough for the library users.

e.g. RabbitMQ official [[https://godoc.org/github.com/streadway/amqp][amqp]] library still needs another cumbersome wrapper library such as [[https://godoc.org/github.com/NeowayLabs/wabbit][wabbit]] just to enable code testability by mocking it.

* What we learnt

* What we learnt

- Go favors *Composition*over*Inheritance*, so we should code in Go way, not OOP way.
- Most of database migration libraries in Go are still *incomplete*.
- Do not rely too heavily on *ORM*libraries*, test your implementations comprehensively.
- Go Interface is powerful indeed, but if complex libraries are not designed with Interface in mind, the mocking efforts will be cumbersome enough for the library users.

* References

.link https://tour.golang.org
.link https://blog.golang.org/go-fmt-your-code
.link https://golang.org/doc/faq#Is_Go_an_object-oriented_language
.link https://medium.com/@benbjohnson/structuring-applications-in-go-3b04be4ff091
.link http://mjk.space/5-things-about-programming-learned-with-go/
.link http://mjk.space/how-to-avoid-inheritance-in-ruby/

